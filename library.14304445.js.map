{"mappings":"kpBAsBA,IAAAA,EACAC,E,iJArBA,IAAIC,EAAU,GAoBdF,EAlBA,SAAkBG,GAGhB,IAFA,IAAIC,EAAOC,OAAOD,KAAKD,GAEdG,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAC/BJ,EAAQE,EAAKE,IAAMH,EAAMC,EAAKE,G,EAelCL,EAXA,SAAiBO,GACf,IAAIC,EAAWP,EAAQM,GAEvB,GAAgB,MAAZC,EACF,MAAM,IAAIC,MAAM,oCAAsCF,GAGxD,OAAOC,C,KCnBTE,EAAA,SAAAC,SAA8CC,KAAKC,MAAM,0J,MCAzDC,EAAiB,IAAAC,IAAoBL,EAAA,SAAAM,QAA6C,SAAQC,OAAAC,KAAAC,KAAEC,WCE5F,MAAMC,EAAYC,SAASC,cAAc,aAyCzC,SAASC,EAAQC,GACfA,EAAIC,iBACJC,QAAQC,IAAIH,E,EAzCd,ICIe,MACbI,cACEC,KAAKC,YAAc,GACnBD,KAAKE,KAAO,C,CAGdC,oBACE,MAIMC,EAAW,6FAHI,IAAIC,gBAAgB,CACvCH,KAAMF,KAAKE,SAIRI,aAAaC,QAAQ,iBACxBP,KAAKQ,YAGP,IACE,MAAMC,QAAiBC,MAAMN,GACvBO,QAAaF,EAASG,OAK5B,OAHAZ,KAAKa,gBAELhB,QAAQC,IAAIa,GACLA,C,CACP,MAAOG,GACPjB,QAAQiB,MAAMA,E,EAIlBX,qBACE,MAMMC,EAAW,uFALI,IAAIC,gBAAgB,CACvCH,KAAMF,KAAKE,KACXa,MAAOf,KAAKC,gBAKTK,aAAaC,QAAQ,iBACxBP,KAAKQ,YAGP,IACE,MAAMC,QAAiBC,MAAMN,GACvBO,QAAaF,EAASG,OAG5B,OADAf,QAAQC,IAAIa,GACLA,C,CACP,MAAOG,GACPjB,QAAQiB,MAAMA,E,EAIlBX,kBAIE,IACE,MAAMM,QAAiBC,MAHR,0FAITC,QAAaF,EAASG,OAEtBI,EAAe,GAKrB,OAJAL,EAAKM,OAAOC,SAAQ,EAACzC,GAAEA,EAAE0C,KAAEA,KAAYH,EAAavC,GAAM0C,IAC1Db,aAAac,QAAQ,eAAgBtC,KAAKuC,UAAUL,IAEpDnB,QAAQC,IAAIa,GACLA,C,CACP,MAAOG,GACPjB,QAAQiB,MAAMA,E,EAIlBD,gBACE,OAAQb,KAAKE,MAAQ,C,CAGvBoB,YACE,OAAQtB,KAAKE,KAAO,C,CAGlBa,YACF,OAAOf,KAAKC,W,CAGVc,UAAMQ,GACRvB,KAAKC,YAAcsB,C,IDzFpBC,cACAC,MAGI,SAAsBC,GAE3B,MACMC,EAAa7C,KAAKC,MAAMuB,aAAaC,QAAQ,iBAC7CqB,EAASF,EAAOG,QACnBC,KAAIC,IACH,MACEC,YAAaC,EAAUC,MACvBA,EACAC,UAAWC,EACXC,aAAcC,GACZP,EACEQ,EAAcH,EAASN,KAAIU,GAASb,EAAWa,KACrD,MAAO,sHACLP,EAZW,kCAYaA,EAAaQ,EAAAzD,WAC9BkD,qFAAyFA,mDAE1FK,EAAY/D,OAAS,EACjB+D,EAAYG,KAAK,MACjBH,EAAYI,MAAM,EAAG,GAAGD,KAAK,MAAQ,+DAENJ,EAAWK,MAAM,EAAG,sCAC3C,IAErBD,KAAK,IAERnD,EAAUqD,UAAYhB,EAGtBrC,EACGsD,iBAAiB,qBACjB3B,SAAQ4B,GAAWA,EAAQC,iBAAiB,QAASrD,I,IAjCvDsD,OAAMC,GAAOpD,QAAQC,IAAI,UAAWmD","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-afcba548bb366304.js","node_modules/@parcel/runtime-js/lib/runtime-bd5c34c18d96e10a.js","src/js/render-cards.js","src/js/restAPI/restAPI.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"1zJhX\\\":\\\"library.14304445.js\\\",\\\"1aYh8\\\":\\\"default-poster.5762cb38.jpg\\\",\\\"5UbS1\\\":\\\"index.504e29bc.css\\\"}\"));","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"1aYh8\")).toString();","import FilmRestAPI from './restAPI/restAPI';\nimport defaultPoster from '../images/default-poster.jpg';\nconst cardSetEl = document.querySelector('.card-set');\n\nnew FilmRestAPI()\n  .fetchMovies()\n  .then(renderMovies)\n  .catch(err => console.log('Error: ', err));\n\nexport function renderMovies(movies) {\n  //   console.log(movies.results);\n  const IMG_BASE = 'https://image.tmdb.org/t/p/w400';\n  const genresList = JSON.parse(localStorage.getItem('MOVIE_GENRES'));\n  const markup = movies.results\n    .map(movie => {\n      const {\n        poster_path: posterPath,\n        title,\n        genre_ids: genreIds,\n        release_date: releseDate,\n      } = movie;\n      const movieGenres = genreIds.map(genre => genresList[genre]);\n      return `<li class=\"card-set__item movie-card\"><a href=\"\" class=\"movie-card__link\"><div class=\"movie-card__holder\"><img src=${\n        posterPath ? IMG_BASE + posterPath : defaultPoster\n      } alt=\"${title} poster\" class=\"movie-card__img\" width=\"100%\"></div><p class=\"movie-card__title\">${title}\n            </p><p class=\"movie-card__genre\">${\n              movieGenres.length < 3\n                ? movieGenres.join(', ')\n                : movieGenres.slice(0, 2).join(', ') + ', Other'\n            } |\n                <span class=\"movie-card__date\">${releseDate.slice(0, 4)}</span>\n            </p></a></li>`;\n    })\n    .join('');\n\n  cardSetEl.innerHTML = markup;\n\n  //   const links = cardSetEl.querySelectorAll('.movie-card__link');\n  cardSetEl\n    .querySelectorAll('.movie-card__link')\n    .forEach(element => element.addEventListener('click', onClick));\n}\n\nfunction onClick(evt) {\n  evt.preventDefault();\n  console.log(evt);\n}\n","// API-Key\n// 4c6e55add2f00844e9f979bd7b0fac7c\n\n//-created class with methods:\n//  -fetchMovies(movies for main page)\n//  -searchMovies(for search form)\n//  -getGenres(returned array of objects, which include genreID and genreName)\n\nexport default class FilmRestAPI {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n  }\n\n  async fetchMovies() {\n    const API_KEY = '4c6e55add2f00844e9f979bd7b0fac7c';\n    const searchParams = new URLSearchParams({\n      page: this.page,\n    });\n    const BASE_URL = `https://api.themoviedb.org/3/trending/movie/week?api_key=${API_KEY}&${searchParams}`;\n\n    if (!localStorage.getItem('MOVIE_GENRES')) {\n      this.getGenres();\n    }\n\n    try {\n      const response = await fetch(BASE_URL);\n      const data = await response.json();\n\n      this.incrementPage();\n\n      console.log(data);\n      return data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async searchMovies() {\n    const API_KEY = '4c6e55add2f00844e9f979bd7b0fac7c';\n    const searchParams = new URLSearchParams({\n      page: this.page,\n      query: this.searchQuery,\n    });\n\n    const BASE_URL = ` https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&${searchParams}`;\n\n    if (!localStorage.getItem('MOVIE_GENRES')) {\n      this.getGenres();\n    }\n\n    try {\n      const response = await fetch(BASE_URL);\n      const data = await response.json();\n\n      console.log(data);\n      return data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async getGenres() {\n    const API_KEY = '4c6e55add2f00844e9f979bd7b0fac7c';\n    const BASE_URL = `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`;\n\n    try {\n      const response = await fetch(BASE_URL);\n      const data = await response.json();\n\n      const parsedGenres = {};\n      data.genres.forEach(({ id, name }) => (parsedGenres[id] = name));\n      localStorage.setItem('MOVIE_GENRES', JSON.stringify(parsedGenres));\n\n      console.log(data);\n      return data;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  incrementPage() {\n    return (this.page += 1);\n  }\n\n  resetPage() {\n    return (this.page = 1);\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n}\n"],"names":["$ef7689007096c8a0$export$6503ec6e8aabbaf","$ef7689007096c8a0$export$f7ad0328861e2f03","$ef7689007096c8a0$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$77b44675a96097a2$exports","URL","resolve","import","meta","url","toString","$13315e1086e5db7e$var$cardSetEl","document","querySelector","$13315e1086e5db7e$var$onClick","evt","preventDefault","console","log","constructor","this","searchQuery","page","async","BASE_URL","URLSearchParams","localStorage","getItem","getGenres","response","fetch","data","json","incrementPage","error","query","parsedGenres","genres","forEach","name","setItem","stringify","resetPage","newQuery","fetchMovies","then","movies","genresList","markup","results","map","movie","poster_path","posterPath","title","genre_ids","genreIds","release_date","releseDate","movieGenres","genre","$parcel$interopDefault","join","slice","innerHTML","querySelectorAll","element","addEventListener","catch","err"],"version":3,"file":"library.14304445.js.map"}